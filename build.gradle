buildscript {
  configurations.classpath {
    resolutionStrategy {
      //This is required by 'git-publish' version '4.1.1':
      force 'org.eclipse.jgit:org.eclipse.jgit:5.13.0.202109080827-r'
    }
  }
}

plugins {
    id 'com.diffplug.spotless' version '5.1.1' apply false
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.ajoberstar.git-publish' version '3.0.1'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id 'de.marcphilipp.nexus-publish' version '0.4.0' apply false
    id 'net.researchgate.release' version '2.6.0'
    id 'io.codearte.nexus-staging' version '0.22.0'
}

wrapper {
    gradleVersion = '7.3'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'de.marcphilipp.nexus-publish'
    apply plugin: 'maven-publish'

    group = 'fr.jmini.htmlchecker'

    signing {
        useGpgCmd()
        sign(publishing.publications)
    }

    tasks.withType(Sign) {
        onlyIf {
            project.hasProperty('signing.gnupg.keyName')
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()

        compileJava.options.encoding = "UTF-8"
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }

    spotless {
        java {
            importOrder 'java', 'javax', 'org', 'com', ''
            removeUnusedImports()

            // available versions are: https://github.com/diffplug/spotless/tree/master/lib-extra/src/main/resources/com/diffplug/spotless/extra/eclipse_jdt_formatter
            eclipse('4.13.0').configFile('.settings/org.eclipse.jdt.core.prefs')
        }
    }

    repositories {
        // mavenLocal()
        mavenCentral()
    }

    nexusPublishing {
        repositories {
            sonatype {
                username = project.findProperty('sonatypeUser') ?: ''
                password = project.findProperty('sonatypePassword') ?: ''
            }
        }
    }
}

nexusStaging {
    packageGroup = 'fr.jmini'
    username = project.findProperty('sonatypeUser') ?: ''
    password = project.findProperty('sonatypePassword') ?: ''
}

def buildDate() {
    return new Date().format('yyyy-MM-dd')
}

configurations {
    asciidoctorExtensions
}

asciidoctorj {
    version = "$asciidoctorjVersion"
}

asciidoctor {
    configurations 'asciidoctorExtensions'
    sourceDir = file('docs/src')
    baseDirFollowsSourceFile()
    outputDir = file('build/docs/html5')
    resources {
        from('docs/src') {
            include '*.png'
        }
    }
    attributes = ['revdate'           : "${buildDate()}",
                  'project-version'   : "$version",
                  'artifacts-version' : "$lastVersion",
                  'gh-repo-owner'     : "$githubRepositoryOwner",
                  'gh-repo-name'      : "$githubRepositoryName",
                  'source-highlighter': 'coderay',
                  'imagesdir'         : '',
                  'toc'               : 'left',
                  'toclevels'         : '3',
                  'icons'             : 'font',
                  'sectanchors'       : 'true',
                  'idprefix'          : '',
                  'idseparator'       : '-',
                  'docinfo1'          : 'true']
    repositories {
        mavenCentral()
    }
    dependencies {
        asciidoctorExtensions 'fr.jmini.asciidoctorj:git-link:3.2.1'
    }
}

gitPublish {
    repoUri = 'git@github.com:' + "$githubRepositoryOwner" + '/' + "$githubRepositoryName" + '.git'
    branch = 'gh-pages'

    contents {
        from "${file('build/docs/html5')}"
    }

    preserve {
        include '.nojekyll'
        include 'example-report.html'
        include 'example-report.xml'
    }

    commitMessage = "Update the 'gh-pages' branch."
}

release {
    buildTasks = ['releaseBuild']
}

task releaseBuild {
    dependsOn(
            'checkLastVersionValue',
            'clean',
            'build',
            project.getTasksByName('publishToSonatype', true),
            'asciidoctor',
            'gitPublishPush'
    )
}

task checkLastVersionValue {
    doLast {
        if(version.endsWith('SNAPSHOT')) {
            throw new GradleException("version '$version' ends with SNAPSHOT, this is not a release build!")
        }
        if(lastVersion != version) {
            throw new GradleException("lastVersion '$lastVersion' does not match version '$version', fix it in the 'gradle.properties' file.")
        }
    }
}

def updateLastVersionValueTask = tasks.register('updateLastVersionValue') {
    doLast {
        def propertiesFile = file('gradle.properties')
        def content = propertiesFile.text
        content = content.replaceAll("lastVersion=[0-9\\.]+", "lastVersion=" + version.replace('-SNAPSHOT', ''))
        propertiesFile.text = content
    }
}

model {
    tasks.unSnapshotVersion {
        dependsOn updateLastVersionValueTask
    }
}
